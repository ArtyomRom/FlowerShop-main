import os


import dateparser
from aiogram import Router, types, Dispatcher

from aiogram import Router, types, Bot

from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async
from shop.models import Bouquet, Customer, Order, Statistics, Consultation
from telegram_bot.bot_tools import keyboards
import asyncio


from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import dateparser
from dotenv import load_dotenv

router = Router()
load_dotenv()
TOKEN = os.getenv("TOKEN_BOT")
bot = Bot(token=TOKEN)


class CustomOccasionState(StatesGroup):
    waiting_for_custom_occasion = State()
    waiting_for_phone = State()
    waiting_for_price = State()
    waiting_for_contact_info = State()


class OrderState(StatesGroup):
    waiting_for_name = State()
    waiting_for_address = State()
    waiting_for_delivery_time = State()
    waiting_for_phone = State()


@router.message(CommandStart())
async def start_handler(message: types.Message):
    user_name = (
        message.from_user.username
        if message.from_user.username
        else message.from_user.first_name
    )
    text = f"–ü—Ä–∏–≤–µ—Ç, {user_name} üôã‚Äç‚ôÄÔ∏è! FlowerShop –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è. –ö –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ª–∏–±–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π"
    await message.answer(text, reply_markup=keyboards.get_occasion_keyboard())


@router.callback_query(lambda c: c.data == "occasion_other")
async def handle_other_occasion(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–≤–æ–¥:")
    await state.set_state(CustomOccasionState.waiting_for_custom_occasion)
    await callback.answer()


@router.message(CustomOccasionState.waiting_for_custom_occasion)
async def process_custom_occasion(message: types.Message, state: FSMContext):
    user_occasion = message.text
    text = f"–°–ø–∞—Å–∏–±–æ! –í—ã —É–∫–∞–∑–∞–ª–∏ –ø–æ–≤–æ–¥: *{user_occasion}* üíê"
    price_keyboard = keyboards.get_select_price()

    await message.answer(text, parse_mode="Markdown", reply_markup=price_keyboard)
    await state.set_state(CustomOccasionState.waiting_for_price)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(occasion=user_occasion)


@router.callback_query(lambda c: c.data == "consultation")
async def request_consultation(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç."
    )
    await state.set_state(
        CustomOccasionState.waiting_for_contact_info
    )  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await callback.answer()


@router.message(CustomOccasionState.waiting_for_contact_info)
async def process_contact_info(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    contact_info = message.text.split()

    if len(contact_info) < 2:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –ù–æ–º–µ—Ä."
        )
        return

    user_name = contact_info[0]
    user_phone = contact_info[1]

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –º–æ–¥–µ–ª–∏ Consultation
    consultation = await sync_to_async(Consultation.objects.create)(
        customer_name=user_name,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
        phone=user_phone,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    )

    await message.answer(
        f"üìù –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–ò–º—è: {consultation.customer_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {consultation.phone}"
    )

    await state.clear()


@router.message(CustomOccasionState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone_number = message.text
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä {phone_number} –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    await state.clear()


@router.callback_query(lambda c: c.data.startswith("occasion_"))
async def handle_occasion(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–≤–æ–¥–æ–≤"""
    occasion_key = callback.data.replace("occasion_", "")
    bouquets = await sync_to_async(list)(Bouquet.objects.filter(occasion=occasion_key))

    if not bouquets:
        await callback.message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª—É—á–∞—è üòî"
        )
        return

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä —Å—É–º–º—ã
    await callback.message.answer(
        "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?", reply_markup=keyboards.get_select_price()
    )
    await state.set_state(CustomOccasionState.waiting_for_price)
    await state.update_data(occasion=occasion_key)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("price_"))
async def handle_price_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã"""
    price_key = callback.data.replace("price_", "")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    user_occasion = user_data.get("occasion")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
    if price_key == "nometter":
        price_filter = {}  # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ
    elif price_key == "over2000":
        price_filter = {"price__gt": 2000}  # –í—Å–µ –±—É–∫–µ—Ç—ã –¥–æ—Ä–æ–∂–µ 2000 —Ä—É–±.
    else:
        price_filter = {"price__lte": int(price_key)}

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—É–∫–µ—Ç–æ–≤
    STANDARD_OCCASIONS = ["birthday", "wedding", "school", "no_reason"]

    if user_occasion in STANDARD_OCCASIONS:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –±—É–∫–µ—Ç—ã –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ø–æ–≤–æ–¥—É
        bouquets = await sync_to_async(list)(
            Bouquet.objects.filter(occasion=user_occasion, **price_filter)
        )
    elif user_occasion and user_occasion not in ["wedding", "school"]:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–≤–æ–π –ø–æ–≤–æ–¥, –∏—Å–∫–ª—é—á–∞–µ–º —à–∫–æ–ª—å–Ω—ã–µ –∏ —Å–≤–∞–¥–µ–±–Ω—ã–µ –±—É–∫–µ—Ç—ã
        bouquets = await sync_to_async(list)(
            Bouquet.objects.filter(**price_filter).exclude(
                occasion__in=["wedding", "school"]
            )
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–≤–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –±—É–∫–µ—Ç—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        bouquets = await sync_to_async(list)(Bouquet.objects.filter(**price_filter))

    if not bouquets:
        await callback.message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–≤–æ–¥–∞ {user_occasion} –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ üòî"
        )
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±—É–∫–µ—Ç–æ–≤
    for bouquet in bouquets:
        text = f"üå∏ *{bouquet.name}*\n{bouquet.description}\nüí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.\n‚ú®*{bouquet.essence_bouquet}*"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –±—É–∫–µ—Ç",
                        callback_data=f"bouquet_{bouquet.id}",
                    )
                ]
            ]
        )
        if bouquet.image:
            image_path = bouquet.image.path
            if os.path.exists(image_path):
                img_input = FSInputFile(image_path)
                await callback.message.answer_photo(
                    img_input,
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
            else:
                await callback.message.answer(
                    f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—É–∫–µ—Ç–∞ {bouquet.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
                )
        else:
            await callback.message.answer(
                text, parse_mode="Markdown", reply_markup=keyboard
            )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üå∏ –ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="consultation"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="all_bouquet"
                )
            ],
        ]
    )
    text = "*–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?*\n–ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞"
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(lambda c: c.data == "all_bouquet")
async def show_all_bouquets(callback: types.CallbackQuery):
    bouquets = await sync_to_async(list)(Bouquet.objects.all())
    for bouquet in bouquets:
        text = (
            f"üå∏ *{bouquet.name}*\n{bouquet.description}\nüí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –±—É–∫–µ—Ç",
                        callback_data=f"bouquet_{bouquet.id}",
                    )
                ]
            ]
        )
        if bouquet.image:
            image_path = bouquet.image.path
            if os.path.exists(image_path):
                img_input = FSInputFile(image_path)
                await callback.message.answer_photo(
                    img_input,
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
            else:
                await callback.message.answer(
                    f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—É–∫–µ—Ç–∞ {bouquet.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
                )
        else:
            await callback.message.answer(
                text, parse_mode="Markdown", reply_markup=keyboard
            )

    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("bouquet_"))
async def handle_bouquet_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—É–∫–µ—Ç–∞"""
    bouquet_id = int(callback.data.replace("bouquet_", ""))
    try:
        bouquet = await sync_to_async(Bouquet.objects.get)(id=bouquet_id)
    except Bouquet.DoesNotExist:
        await callback.message.answer("–≠—Ç–æ—Ç –±—É–∫–µ—Ç –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω üòî")
        return

    text = f"üéâ –í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç *{bouquet.name}*! üíê\nüí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_{bouquet.id}"
                )
            ],
        ]
    )
    await callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(lambda c: c.data == "view_collection")
async def view_collection(callback: types.CallbackQuery):
    bouquets = await sync_to_async(list)(Bouquet.objects.all())
    if not bouquets:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤ üòî")
        return
    for bouquet in bouquets:
        text = (
            f"üå∏ *{bouquet.name}*\n{bouquet.description}\nüí∞ –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±."
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –±—É–∫–µ—Ç",
                        callback_data=f"bouquet_{bouquet.id}",
                    )
                ]
            ]
        )
        if bouquet.image:
            image_path = bouquet.image.path
            if os.path.exists(image_path):
                img_input = FSInputFile(image_path)
                await callback.message.answer_photo(
                    img_input,
                    caption=text,
                    parse_mode="Markdown",
                    reply_markup=keyboard,
                )
            else:
                await callback.message.answer(
                    f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—É–∫–µ—Ç–∞ {bouquet.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
                )
        else:
            await callback.message.answer(
                text, parse_mode="Markdown", reply_markup=keyboard
            )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.callback_query(lambda c: c.data.startswith("order_"))
async def start_order(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""

    bouquet_id = int(callback.data.replace("order_", ""))

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
    user, created = await sync_to_async(Customer.objects.get_or_create)(
        tg_id=callback.from_user.id
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É–∫–µ—Ç –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_bouquet = await sync_to_async(Bouquet.objects.get)(id=bouquet_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
    await state.update_data(user_id=user.id, bouquet_id=selected_bouquet.id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderState.waiting_for_name)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(OrderState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞"""
    await sync_to_async(Customer.objects.filter(tg_id=message.from_user.id).update)(
        name=message.text
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderState.waiting_for_address)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
@router.message(OrderState.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏"""
    await state.update_data(address=message.text)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.04.2025 15:30):"
    )
    await state.set_state(OrderState.waiting_for_delivery_time)


@router.message(OrderState.waiting_for_delivery_time)
async def process_delivery_time(message: types.Message, state: FSMContext):
    delivery_time = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –∏ –¥–∞—Ç–∞, –∏ –≤—Ä–µ–º—è
    if len(delivery_time.split()) == 1:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –Ω–æ –∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.04.2025 15:30)."
        )
        return  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ–º, –±–æ—Ç –∂–¥—ë—Ç –Ω–æ–≤—ã–π –≤–≤–æ–¥

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    parsed_date = dateparser.parse(delivery_time, languages=["ru"])

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
    if not parsed_date:
        await message.answer(
            "–î–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 10.04.2025 15:30."
        )
        return  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è OrderState.waiting_for_delivery_time

    # –ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    await state.update_data(delivery_time=parsed_date)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderState.waiting_for_phone)

async def send_order_notifications(user, bouquet, user_data, phone):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫—É—Ä—å–µ—Ä—É –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
    courier_chat_id = os.getenv("COURIER_CHAT_ID")
    manager_chat_id = os.getenv("MANAGER_CHAT_ID")
    text = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.name}\n"
            f"üíê –ë—É–∫–µ—Ç: {bouquet.name}\n"
            f"üì¶ –ê–¥—Ä–µ—Å: {user_data['address']}\n"
            f"üïí –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['delivery_time']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await bot.send_message(chat_id=courier_chat_id, text=text)
    await bot.send_message(chat_id=manager_chat_id, text=text)


@router.message(OrderState.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    user_data = await state.get_data()

    if "delivery_time" not in user_data or not user_data["delivery_time"]:
        await message.answer("–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return
    user = await sync_to_async(Customer.objects.get)(id=user_data["user_id"])
    bouquet = await sync_to_async(Bouquet.objects.get)(id=user_data["bouquet_id"])

    order = await sync_to_async(Order.objects.create)(
        customer=user,
        bouquet=bouquet,
        address=user_data["address"],
        delivery_time=user_data["delivery_time"],
        status="new",
    )

    await sync_to_async(Statistics.objects.create)(
        customer_name=user,
        bouquet_name=bouquet,
        quantity=1,
    )

    await message.answer(
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\nüíê –ë—É–∫–µ—Ç: {bouquet.name}\nüì¶ –ê–¥—Ä–µ—Å: {user_data['address']}\nüïí –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {user_data['delivery_time']}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {message.text}"
    )

    asyncio.create_task(send_order_notifications(user, bouquet, user_data, message.text))
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–∫–∞–∑", callback_data="repeat_order")]
        ]
    )
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–∫–∞–∑?", reply_markup=keyboard)
    await state.clear()


@router.callback_query(lambda c: c.data == "repeat_order")
async def repeat_order(callback_query: types.CallbackQuery, state: FSMContext):
    # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    await state.set_data({})  # –≠—Ç–æ —Å–±—Ä–æ—Å–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    await callback_query.message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –±—É–∫–µ—Ç –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=keyboards.get_occasion_keyboard())